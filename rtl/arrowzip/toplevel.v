////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./toplevel.v
//
// Project:	ArrowZip, a demonstration of the Arrow MAX1000 FPGA board
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . clock.txt global.txt dlyarbiter.txt version.txt buserr.txt pic.txt pwrcount.txt spio.txt rtclight.txt hbconsole.txt bkram.txt flexpress.txt sdram.txt zipbones.txt sdramscope.txt mem_flash_bkram.txt mem_bkram_only.txt mem_sdram_bkram.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2018-2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
`default_nettype	none


//
// Here we declare our toplevel.v (toplevel) design module.
// All design logic must take place beneath this top level.
//
// The port declarations just copy data from the @TOP.PORTLIST
// key, or equivalently from the @MAIN.PORTLIST key if
// @TOP.PORTLIST is absent.  For those peripherals that don't need
// any top level logic, the @MAIN.PORTLIST should be sufficent,
// so the @TOP.PORTLIST key may be left undefined.
//
// The only exception is that any clocks with CLOCK.TOP tags will
// also appear in this list
//
module	toplevel(i_clk,
		// SPIO interface
		i_btn, o_led,
		// Top level SDRAM I/O ports
		o_ram_clk, o_ram_cke, o_ram_cs_n, o_ram_ras_n, o_ram_cas_n,
		o_ram_we_n, o_ram_bs, o_ram_addr, o_ram_udqm, o_ram_ldqm,
		io_ram_data,
		// Top level Dual-SPI I/O ports
		o_dspi_cs_n, o_dspi_sck, io_dspi_dat,
		// UART/host to wishbone interface
		i_uart_rx, o_uart_tx);
	//
	// Declaring our input and output ports.  We listed these above,
	// now we are declaring them here.
	//
	// These declarations just copy data from the @TOP.IODECLS key,
	// or from the @MAIN.IODECL key if @TOP.IODECL is absent.  For
	// those peripherals that don't do anything at the top level,
	// the @MAIN.IODECL key should be sufficient, so the @TOP.IODECL
	// key may be left undefined.
	//
	// We start with any @CLOCK.TOP keys
	//
	input	wire		i_clk;
	// SPIO interface
	input	wire	[1-1:0]	i_btn;
	output	wire	[8-1:0]	o_led;
	// SDRAM
	output	wire	o_ram_clk, o_ram_cke,
			o_ram_cs_n, o_ram_ras_n, o_ram_cas_n, o_ram_we_n;
	output	wire	[1:0]	o_ram_bs;
	output	wire	[11:0]	o_ram_addr;
	output	wire		o_ram_udqm, o_ram_ldqm;
	inout	wire	[15:0]	io_ram_data;
	// Dual SPI flash
	output	wire		o_dspi_cs_n;
	output	wire		o_dspi_sck;
	inout	wire	[1:0]	io_dspi_dat;
	// UART/host to wishbone interface
	// (Debugging access) Serial port
	input	wire	i_uart_rx;
	output	wire	o_uart_tx;


	//
	// Declaring component data, internal wires and registers
	//
	// These declarations just copy data from the @TOP.DEFNS key
	// within the component data files.
	//
	// SDRAM data wires
	wire	[15:0]	w_ram_data;
	wire		w_ram_drive_data;
	reg	[15:0]	r_ram_data;
	wire		s_clk, s_reset, mem_clk;
	wire		w_dspi_cs_n, w_dspi_sck;
	wire	[1:0]	dspi_bmod, i_dspi_dat, dspi_datp, dspi_datn, o_dspi_dat;


	//
	// Time to call the main module within main.v.  Remember, the purpose
	// of the main.v module is to contain all of our portable logic.
	// Things that are Xilinx (or even Altera) specific, or for that
	// matter anything that requires something other than on-off logic,
	// such as the high impedence states required by many wires, is
	// kept in this (toplevel.v) module.  Everything else goes in
	// main.v.
	//
	// We automatically place s_clk, and s_reset here.  You may need
	// to define those above.  (You did, didn't you?)  Other
	// component descriptions come from the keys @TOP.MAIN (if it
	// exists), or @MAIN.PORTLIST if it does not.
	//

	main	thedesign(s_clk, s_reset,
		// SPIO interface
		i_btn, o_led,
			// SDRAM interface
			// o_ram_clk,	// SDRAM clock = clk_100mhz_s = s_clk
			o_ram_cs_n,	// Chip select
			o_ram_cke,	// Clock enable
			o_ram_ras_n,	// Row address strobe
			o_ram_cas_n,	// Column address strobe
			o_ram_we_n,	// Write enable
			o_ram_bs,	// Bank select
			o_ram_addr,	// Address lines
			w_ram_drive_data,
			r_ram_data,	// Data lines (input)
			w_ram_data,	// Data lines (output)
			{ o_ram_udqm, o_ram_ldqm },
		// Dual SPI flash
		w_dspi_cs_n, w_dspi_sck, o_dspi_dat, i_dspi_dat, dspi_bmod,
		i_uart_rx, o_uart_tx);


	//
	// Our final section to the toplevel is used to provide all of
	// that special logic that couldnt fit in main.  This logic is
	// given by the @TOP.INSERT tag in our data files.
	//


	//
	// Tri-sate logic for the SDRAM
	//
	assign io_ram_data = (w_ram_drive_data) ? w_ram_data
				: 16'bzzzz_zzzz_zzzz_zzzz;

	reg	[15:0]	r_ram_data_ext_clk;
	// always @(posedge intermediate_clk_n)
	always @(posedge s_clk)
		{ r_ram_data, r_ram_data_ext_clk }
				<= { r_ram_data_ext_clk, io_ram_data };
	assign	o_ram_clk = mem_clk;

	//
	// Generate a 100MHz system clock from the incoming 12MHz clock
	//
	genpll	genclk(.inclk0(i_clk),
			.c0(s_clk), 
			.c1(mem_clk));
	//
	// This design uses local internal resets rather than a global reset
	assign	s_reset = 1'b0;

	//
	//
	// Wires for setting up the QSPI flash wishbone peripheral
	//
	//
	// QSPI)BMOD, Dual SPI bus mode, Bus modes are:
	//	0?	Normal serial mode, one bit in one bit out
	//	10	Dual SPI mode, going out
	//	11	Dual SPI mode coming from the device (read mode)
	altoddr dspi_ddr_csn(
		.outclock(s_clk),
		.din({(2){ w_dspi_cs_n}}),
		.pad_out(o_dspi_cs_n));
	altoddr dspi_ddr_sck( .outclock(s_clk),
		// .din({ !w_dspi_sck, 1'b1 }),
		.din({(2){w_dspi_sck}}),
		.pad_out(o_dspi_sck));
	addrio	dspi_d0(.inclock(s_clk), .outclock(s_clk),
			.dout({dspi_datp[0], dspi_datn[0]}),
			.din({(2){o_dspi_dat[0]}}),
			.pad_io(io_dspi_dat[0]),
			.oe(!dspi_bmod[0]));
	addrio	dspi_d1(.inclock(s_clk), .outclock(s_clk),
			.dout({dspi_datp[1], dspi_datn[1]}),
			.din({(2){o_dspi_dat[1]}}),
			.pad_io(io_dspi_dat[1]),
			.oe((dspi_bmod == 2'b10)?1'b1:1'b0));
	assign	i_dspi_dat = dspi_datn;



endmodule // end of toplevel.v module definition
