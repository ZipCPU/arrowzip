////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./board.h
//
// Project:	ArrowZip, a demonstration of the Arrow MAX1000 FPGA board
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . clock.txt global.txt dlyarbiter.txt version.txt buserr.txt pic.txt pwrcount.txt spio.txt memsdev.txt rtclight.txt hbconsole.txt bkram.txt flexpress.txt sdram.txt zipbones.txt memsscope.txt mem_all.txt mem_flash_bkram.txt mem_bkram_only.txt mem_sdram_bkram.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2018-2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	BOARD_H
#define	BOARD_H

// And, so that we can know what is and isn't defined
// from within our main.v file, let's include:
#include <design.h>

#include <design.h>
#include <cpudefs.h>

#define	_HAVE_ZIPBONES

#ifdef	INCLUDE_ZIPCPU
#ifdef INCLUDE_DMA_CONTROLLER
#define	_HAVE_ZIPSYS_DMA
#endif	// INCLUDE_DMA_CONTROLLER
#ifdef INCLUDE_ACCOUNTING_COUNTERS
#define	_HAVE_ZIPSYS_PERFORMANCE_COUNTERS
#endif	// INCLUDE_ACCOUNTING_COUNTERS
#endif // INCLUDE_ZIPCPU


typedef struct  CONSOLE_S {
	unsigned	u_setup;
	unsigned	u_fifo;
	unsigned	u_rx, u_tx;
} CONSOLE;



typedef	struct	RTCLIGHT_S	{
	unsigned	r_clock, r_stopwatch, r_timer, r_alarm;
} RTCLIGHT;


#define	SPIO_BTN_LEFT	0x00100
#define	SPIO_BTN_RIGHT	0x00100


#ifndef	SCOPE_H
#define	SCOPE_H

#define WBSCOPE_NO_RESET        0x80000000u
#define WBSCOPE_TRIGGER         (WBSCOPE_NO_RESET|0x08000000u)
#define WBSCOPE_MANUAL          (WBSCOPE_TRIGGER)
#define WBSCOPE_DISABLE         0x04000000u

typedef	struct	SCOPE_S {
	unsigned s_ctrl, s_data;
} SCOPE;

#endif


#define	CLKFREQHZ	80000000


#define BUSPIC(X) (1<<X)


#define	R_MEMSAUX	7
#define	R_MEMSWHOAMI	15
#define	R_MEMSADC1	72
#define	R_MEMSADC2	74
#define	R_MEMSADC3	76
#define	R_MEMSCTRL0	30
#define	R_MEMSCTRL1	32
#define	R_MEMSCTRL2	33
#define	R_MEMSCTRL3	34
#define	R_MEMSCTRL4	35
#define	R_MEMSCTRL5	36
#define	R_MEMSCTRL6	37
#define	R_MEMSREF	38
#define	R_MEMSSTAT	39
#define	R_MEMSX		92
#define	R_MEMSY		94
#define	R_MEMSZ		96
#define	R_MEMSFIFOC	46
#define	R_MEMSFIFOS	47
#define	R_MEMSINT1C	48
#define	R_MEMSINT1S	49
#define	R_MEMSINT1TH	50
#define	R_MEMSINT1D	51
#define	R_MEMSINT2C	52
#define	R_MEMSINT2S	53
#define	R_MEMSINT2TH	54
#define	R_MEMSINT2D	55
#define R_MEMSCKCFG	56
#define R_MEMSCKSRC	57
#define R_MEMSCKTHS	58
#define R_MEMSTMLIMIT	59
#define R_MEMSLATENCY	60
#define R_MEMSWINDOW	61
#define R_MEMSACTTHS	62
#define R_MEMSACTDUR	63
//
typedef	struct	S_MEMS {
	int	rd[128];
	int	wr[128];
} MEMS;


#ifdef	BUSCONSOLE_ACCESS
#define	_BOARD_HAS_BUSCONSOLE
static volatile CONSOLE *const _uart = ((CONSOLE *)0x00600000);
#endif	// BUSCONSOLE_ACCESS
#ifdef	BKRAM_ACCESS
#define	_BOARD_HAS_BKRAM
extern char	_bkram[0x00008000];
#endif	// BKRAM_ACCESS
#ifdef	RTC_ACCESS
#define	_BOARD_HAS_RTC
static volatile RTCLIGHT *const _rtc = ((RTCLIGHT *)0x00a00800);
#endif	// RTC_ACCESS
#ifdef	SPIO_ACCESS
#define	_BOARD_HAS_SPIO
static volatile unsigned *const _spio = ((unsigned *)0x00800010);
#endif	// SPIO_ACCESS
#ifdef	PWRCOUNT_ACCESS
#define	_BOARD_HAS_PWRCOUNT
static volatile unsigned *const _pwrcount = ((unsigned *)0x0080000c);
#endif	// PWRCOUNT_ACCESS
#ifdef	MEMSSCOPE_SCOPC
#define	_BOARD_HAS_MEMSSCOPE
static volatile SCOPE *const _memsdbg = ((SCOPE *)0x00400000);
#endif	// MEMSSCOPE_SCOPC
#ifdef	SDRAM_ACCESS
#define	_BOARD_HAS_SDRAM
extern char	_sdram[0x00800000];
#endif	// SDRAM_ACCESS
#define	_BOARD_HAS_BUSERR
static volatile unsigned *const _buserr = ((unsigned *)8388612);
#ifdef	FLASH_ACCESS
#define	_BOARD_HAS_FLASH
extern char _flash[0x00800000];
#endif	// FLASH_ACCESS
#define	_BOARD_HAS_BUILDTIME
#ifdef	BUSPIC_ACCESS
#define	_BOARD_HAS_BUSPIC
static volatile unsigned *const _buspic = ((unsigned *)0x00800008);
#endif	// BUSPIC_ACCESS
#ifdef	MEMS_ACCESS
#define	_BOARD_HAS_MEMS_SENSOR
static volatile MEMS const *_mems = ((MEMS *)0x00a00c00);
#endif	// MEMS_ACCESS
#ifdef	BUSTIMER_ACCESS
#define	_BOARD_HAS_BUSTIMER
static volatile unsigned *const _bustimer = ((unsigned *)0x00a00000);
#endif	// BUSTIMER_ACCESS
#ifdef	FLASHCFG_ACCESS
#define	_BOARD_HAS_FLASHCFG
static volatile unsigned * const _flashcfg = ((unsigned *)(0x00200000));
#endif	// FLASHCFG_ACCESS
#define	_BOARD_HAS_VERSION
//
// Interrupt assignments (1 PICs)
//
// PIC: buspic
#define	BUSPIC_UARTTXF	BUSPIC(0)
#define	BUSPIC_UARTRXF	BUSPIC(1)
#define	BUSPIC_UARTTX	BUSPIC(2)
#define	BUSPIC_UARTRX	BUSPIC(3)
#define	BUSPIC_RTC	BUSPIC(4)
#define	BUSPIC_SPIO	BUSPIC(5)
#define	BUSPIC_FLASHDBG	BUSPIC(6)
#define	BUSPIC_MEMSDONE	BUSPIC(7)
#define	BUSPIC_MEMSB	BUSPIC(8)
#define	BUSPIC_MEMSA	BUSPIC(9)
#define	BUSPIC_BUSTIMER	BUSPIC(10)
#endif	// BOARD_H
